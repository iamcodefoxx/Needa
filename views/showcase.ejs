<%- include("partials/header.ejs") %>
<%- include("partials/location-modal.ejs") %>

  <section>
    <div class="toast-wrapper-front-end">
      <div class="toast-front-end">
        <div class="icon-container-front-end"></div>
        <div class="message-container-front-end flex-5"></div>
        <button id="close-toast-btn-front-end">&times;</button>
      </div>
    </div>
  </section>

  <section id="showcaseSection">
    <div class="container">
      <div class="subcontainer">
        <div class="showcase-wrapper">

          <div class="showcase-col-1">
            <div class="showcase-col-1-child-1">
              <h2>Settings</h2>
            </div>
            <div class="showcase-col-1-child-2">
              <a href="/settings">
                <div class="showcase-col-1-link flex-row-gap-15">
                  <i class="fas fa-user-circle"></i>
                  <p>EDIT PROFILE</p>
                </div>
              </a>
              <a href="/settings/showcase" style="color:#7449F5;">
                <div class="showcase-col-1-link flex-row-gap-10" style="background-color: #f1f1f1;">
                  <i class="fa-solid fa-cloud-arrow-up"></i>
                  <p>UPLOAD PHOTOS</p>
                </div>
              </a>
              <a href="/settings/account">
                <div class="showcase-col-1-link flex-row-gap-10">
                  <i class="fa-solid fa-user-minus"></i>
                  <p>DELETE ACCOUNT</p>
                </div>
              </a>
            </div>
          </div>

          <!-- SHOWCASE PHOTOS  -->
          
          <form id="showcaseForm" class="showcase-col-2">
            <div class="showcase-photos-header">
              <h2>Upload photos</h2>
              <button type="submit" id="update-profile-btn">Upload</button>
            </div>
            <div class="flex-column-gap-10" style="width:100%;">
              <div class="showcase-photos flex-2">
                <span class="inner">Drag & drop photos here or <span class="select">Browse</span></span>
                <p>( Upload up to 9 photos of 1MB max size each.)</p>
                <input name="file" type="file" class="file" multiple="multiple" accept="image/jpeg, image/png, image/jpg" />
              </div>
              <div class="images-container"></div>
            </div>
          </form>
          
          <!-- SUCCESS/ERROR MESSAGES FRONT END -->
          
          <div class="message-container-front-end"></div>
          
          </div>
        </div>
      </div>
    </div>
  </section>

  <div class="loader-wrapper">
    <span class="loader"><span class="loader-inner"></span></span>
  </div>

  <!-- <script src="/js/loader.js"></script> -->
  
  <script src="/js/script.js"></script>

  <script>

    let files = [], // STORE THE PHOTOS
    showcaseForm = document.querySelector("#showcaseForm"), // form id
    form = document.querySelector('.showcase-photos'), // form ( drag area )
    text = document.querySelector('.inner'), // inner text of form
    browse = document.querySelector('.select'), // "Browse" to run input field
    input = document.querySelector('.showcase-photos input'), // file input
    container = document.querySelector('.images-container'), // container in which images will be 
    userId = "<%= user.id %>",
    showcasePhotos = JSON.parse('<%-JSON.stringify(showcasePhotos)%>'),
    length = (showcasePhotos === null) ? null : Object.keys(showcasePhotos).length;

    const toastOptions = {
      'success': { class: "fas fa-check-circle", color: "#47d764", header: "Success" },
      'error': { class: "fas fa-times-circle", color: "#ff1616", header: "Error" },
      'info': { class: "fas fa-info-circle", color: "#2F86EB", header: "Info" },
      'warning': { class: "fas fa-exclamation-circle", color: "#FFC021", header: "Warning" }
    },
      toast = document.querySelector(".toast-front-end"),
      iconContainer = document.querySelector(".icon-container-front-end"),
      messageContainer = document.querySelector(".message-container-front-end"),
      closeToastFrontEnd  = document.querySelector("#close-toast-btn-front-end");
    let x;

    function displayToast(type, msg) {
      clearTimeout(x);
      toast.style.borderLeft = `8px solid ${toastOptions[type].color}`;
      toast.style.transform = "translateX(0)";

      const icon = document.createElement("i");
      const header = document.createElement("p");
      const message = document.createElement("p");

      icon.className = toastOptions[type].class;
      icon.style.color = toastOptions[type].color;
      header.textContent = toastOptions[type].header;
      message.textContent = msg;

      iconContainer.innerHTML = "";
      iconContainer.appendChild(icon);

      messageContainer.innerHTML = "";
      messageContainer.appendChild(header);
      messageContainer.appendChild(message);

      x = setTimeout(() => {
        toast.style.transform = "translateX(400px)";
      }, 5000);
    }

    // TOAST FUNCTIONALITY

    closeToastFrontEnd.addEventListener("click", () => {
      toast.style.transform = "translateX(400px)";
    })

    browse.addEventListener('click', () => input.click());

    // INPUT CHANGE EVENT 

    input.addEventListener('change', () => {
      let file = input.files;

      for (let i = 0; i < file.length; i++) {
        if (files.every(e => e.name !== file[i].name)) 
          files.push(file[i])
      }
      showcaseForm.reset();
      showImages();
    })

    // DISPLAY PHOTOS

    const showImages = () => {
      let images = '';
      files.forEach((e, i) => {
        images += `<div class="image">
                    <img src="${URL.createObjectURL(e)}" alt="image">
                    <span onclick="delImage(${i})">&times;</span>
                  </div>`;
      })
      container.innerHTML = images;
    }

    // DELETE A PHOTO

    const delImage = index => {
      files.splice(index, 1);
      showImages();
    }

    // DISPLAY SHOWCASE IMAGES FROM DB ON PAGE LOAD

    if (length) {
      const forLoop = async _ => {
        for (let i = 0; i < length; i++) {
          let image_url = `http://localhost:5000/showcase-photo/${userId}/${showcasePhotos[i]}`;
          let response = await fetch(image_url);
          let blob = await response.blob();
          let file = new File([blob], showcasePhotos[i], { type: blob.type });
          files.push(file);
        }

      const span = document.querySelectorAll(".span--hidden");
        span.forEach(s => {
          s.classList.remove("span--hidden");
        })

      }
      forLoop();

      let images = '';
      for(let i = 0;i < length;i++) {
        images += `<div class="image">
                    <img src="http://localhost:5000/showcase-photo/${userId}/${showcasePhotos[i]}" alt="image">
                    <span onclick="delImage(${i})" class="span--hidden">&times;</span>
                  </div>`;
      }
      container.innerHTML = images;
    }

    // DRAG AND DROP

    form.addEventListener('dragover', e => {
      e.preventDefault()

      form.classList.add('dragover')
      text.innerHTML = 'Drop images here'
    })

    form.addEventListener('dragleave', e => {
      e.preventDefault()

      form.classList.remove('dragover')
      text.innerHTML = 'Drag & drop image here or <span class="select">Browse</span>'
    })

    form.addEventListener('drop', e => {
      e.preventDefault()

      form.classList.remove('dragover')
      text.innerHTML = 'Drag & drop image here or <span class="select">Browse</span>'

      let file = e.dataTransfer.files;

      for (let i = 0; i < file.length; i++) {
        if (!file[i].type.match("image")) continue; // ONLY PHOTOS (SKIP CURRENT ITERATION IF NOT A PHOTO)
        if (files.every(e => e.name !== file[i].name)) files.push(file[i]) // NO REPEATED PHOTOS
      }
      files = files.slice(0, 9); // UPLOAD 9 PHOTOS MAX
      showImages();

    })

  // SUBMIT REQUEST WITH FETCH

    showcaseForm.addEventListener("submit", (e) => {
      e.preventDefault();


      const loader = document.querySelector(".loader-wrapper");
      loader.classList.add("loader--visible");
      

      const formData = new FormData(showcaseForm);

      files.forEach((e, i) => { 
        formData.append(`file[${i}]`, e)
      })

      fetch("/auth/upload-showcase-photos", {
        method: "POST",
        body: formData
      })

      .then(response => {
        if (!response.ok) {
          throw Error(response.statusText);
        } else {
          return response.json();
        }
      })

      .then(data => {
        if (data.type === "success") {
          loader.classList.remove("loader--visible");
          displayToast('success', data.message);
        } else {
          loader.classList.remove("loader--visible");
          displayToast('error', data.message);
        }
      })

      .catch(error => {
        loader.classList.remove("loader--visible");
        displayToast('error', error);
      });

    });

  </script>

  <% if (typeof user !="undefined" && user) { %>
    <script async
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDLVBTACqJtv8Od3WvXYZPV3kXZtDUwBrk&q&callback=getCoordinates">
      </script>
    <script src="/js/google-map.js"></script>
  <% } %>

<%- include("partials/footer.ejs") %>